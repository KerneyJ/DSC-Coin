#include <cstddef>
#include <cstdint>
#include <fstream>
#include <iostream>
#include <limits>
#include <string>
#include <array>
#include <iomanip> 
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <vector>

#include "defs.hpp"
#include "transaction.hpp"
#include "wallet.hpp"
#include "keys.hpp"

static uint64_t nonce = 0;

static uint64_t get_nonce() {
    return nonce++;
}

Wallet create_wallet() {
    Ed25519Key pub_key, priv_key;
    gen_keys_ed25519(pub_key, priv_key);
    
    return { priv_key, pub_key };
}

// Function to load a wallet from a file
Wallet load_wallet(const std::string& filepath) {
    Wallet wallet;

    // Open the file for reading in binary mode
    std::ifstream file(filepath, std::ios::binary);

    if (file.is_open()) {
        // Read the private key from the file
        file.read(reinterpret_cast<char*>(wallet.priv_key.data()), wallet.priv_key.size());

        // Read the public key from the file
        file.read(reinterpret_cast<char*>(wallet.pub_key.data()), wallet.pub_key.size());

        // Close the file
        file.close();

        std::cout << "Wallet loaded successfully." << std::endl;
    } else {
        std::cerr << "Error opening file: " << filepath << std::endl;
    }

    return wallet;
}


// Function to write a wallet to a file
void store_wallet(const Wallet& wallet) {
    // Open the file for writing in binary mode
    std::ofstream file(WALLET_PATH, std::ios::binary);

    if (file.is_open()) {
        std::string pub_key = base58_encode(wallet.pub_key);
        std::string priv_key = base58_encode(wallet.priv_key);
        
        file.write(priv_key.data(), priv_key.size());\
        file.write(pub_key.data(), pub_key.size());
        file.close();
    } else {
        printf("Error opening file: %s\n", WALLET_PATH);
    }
}

void sign_transaction(Ed25519Key priv_key, Transaction &tx) {
    tx.signature.fill(0);
    tx.signature = sign_data_ed25519(priv_key, (uint8_t*) &tx, sizeof(Transaction));
}

bool verify_transaction_signature(Ed25519Key pub_key, Transaction tx) {
    Ed25519Signature signature = tx.signature;
    tx.signature.fill(0);
    return verify_signature_ed25519(pub_key, signature, (uint8_t*) &tx, sizeof(Transaction));
}

// signature is generated in create_transaction, it should sign all of the other fields in the transaction struct
// the id of the transaction should be unique for each transaction generated by a wallet 
Transaction create_transaction(Wallet wallet, Ed25519Key dest, uint32_t amount) {
    Transaction tx;

    tx.src = wallet.pub_key;
    tx.dest = dest;
    tx.amount = amount;
    tx.id = get_nonce();
    tx.timestamp = static_cast<uint64_t>(std::time(nullptr));
    
    sign_transaction(wallet.priv_key, tx);

    return tx;
}

void display_wallet(const Wallet& wallet) {
    std::string pub_key = base58_encode(wallet.pub_key);
    std::string priv_key = base58_encode(wallet.priv_key);

    printf("Public Key: %s\n", pub_key.c_str());
    printf("Private Key: %s\n", priv_key.c_str());
}